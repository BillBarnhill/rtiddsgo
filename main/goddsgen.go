package main

import (
	"os"
	"log"
	"rtiddsgo/parse"
	"strings"
	"rtiddsgo/generate"
)

// This is the main entrypoint for the goddsgen tool. It reads a DDS IDL file
// and emits golang source code implementing the type-specific functionality
// required for a DDS type. It does for golang what rtiddsgen does for other
// languages.
//
// The command line arguments are:
// - The name of the IDL file to read with path if necessary.
// - The path to the directory containing the RTI DDS installation, such as "/opt/rti_connext_dds-5.2.3".
// - The path to the directory containing the C files generated by rtiddsgen for the same IDL.
// - The file name using in the C-files for the type.
// - The path to directory in which the generated golang files should go.
// - The packages name to use in all generated golang files.
//
func main() {
	if len(os.Args) != 7 {
		log.Fatal("Usage: goddsgen <idl_file_name> <rti_install_dir> <c_files_dir> <c_file_name> <out_path> <package_name>")
	}

	// Read the IDL file.
	idlFile, err := os.Open(os.Args[1])
	if err != nil {
		log.Fatal(err)
	}
	defer idlFile.Close()

	log.Println("Parsing IDL file", os.Args[1])
	types, consts, enums, _ := parse.Parse(idlFile)

	// Generate golang code for each struct and union.
	packageName := os.Args[6]
	for k, v := range types {
		fileName := os.Args[5] + "/" + strings.ToLower(k) + ".go"
		outFileName := fileName
		outFile, err := os.Create(outFileName)
		if err != nil {
			log.Fatal(err)
		}
		defer outFile.Close()

		log.Println("Creating type file", fileName, "with package name", packageName)
		generate.CreateStructFile(packageName, os.Args[3], os.Args[4],  os.Args[2], k, v, outFile)
	}

	// Generate the constants.go file.
	outFileName := os.Args[5] + "/constants.go"
	outFile, err := os.Create(outFileName)
	if err != nil {
		log.Fatal(err)
	}
	defer outFile.Close()
	log.Println("Creating consts file", outFileName, "with package name", packageName)
	generate.CreateConstsFile(packageName, consts, outFile)

	// Generate the enums.go file.
	outFileName = os.Args[5] + "/enums.go"
	outFile, err = os.Create(outFileName)
	if err != nil {
		log.Fatal(err)
	}
	defer outFile.Close()
	log.Println("Creating enums file", outFileName, "with package name", packageName)
	generate.CreateEnumsFile(packageName, enums, outFile)
}


